<?php
/**
 * @file
 * Code for the Leidos feature.
 */

include_once 'leidos.features.inc';

/**
 * Implements hook_theme_registry_alter().
 */
function leidos_theme_registry_alter(&$theme_registry) {
  // Defined path to the current module.
  $module_path = drupal_get_path('module', 'leidos');
  // Find all .tpl.php files in this module's folder recursively.
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {
    // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function leidos_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['#entity_type']) && $form['#entity_type'] == 'fieldable_panels_pane') {
    // Hide some unnecessary fields that clutter the IPE user interface.
    $form['link']['#access'] = FALSE;
    $form['view_mode']['#access'] = FALSE;
    // Custom "add another" button text for better clarity.
    if ($form['#bundle'] == 'link_columns') {
      $form['field_columns']['und']['add_more']['#value'] = t('Add another column');
      foreach ($form['field_columns']['und'] as $key => &$column) {
        if (isset($form['field_columns']['und'][$key]['field_column_links'])) {
          $form['field_columns']['und'][$key]['field_column_links']['und']['add_more']['#value'] = t('Add another section');
        }
      }
    }
  }
  elseif ($form_id == 'panels_panel_context_edit_choose') {
    // Set the default panel layout to Industry Template, remove other layouts.
    $form['categories']['#default_value'] = 'Industry-Template';
    $form['layout']['Industry-Template']['flexible:industry_template']['#default_value'] = 'flexible:industry_template';
    unset($form['categories']['#options']['Builders']);
    unset($form['categories']['#options']['Columns-2']);
    unset($form['categories']['#options']['Columns-3']);
  }
  elseif ($form_id == 'panels_panel_context_edit_content') {
    // Hide the title options in the backend panels form.
    $form['display_title']['title']['#type'] = 'hidden';
  }
  elseif ($form_id == 'ctools_page_title_content_type_edit_form') {
    unset($form['markup']);
    unset($form['id']);
    unset($form['class']);
    $form['override_title']['#type'] = 'hidden';
    $form['override_title']['#default_value'] = TRUE;
    $form['override_title']['#value'] = TRUE;
    $form['override_title_text']['#title'] = t('Title');
    $form['override_title_text']['#required'] = TRUE;
    // Only allow h1 tags for override titles.
    $form['override_title_heading']['#type'] = 'hidden';
    $form['override_title_heading']['#default_value'] = 'h1';
    $form['override_title_heading']['#value'] = 'h1';
    $form['override_title_heading']['#options'] = array(
      'h1' => 'h1',
    );
    // Always show the override title text and heading.
    unset($form['override_title_text']['#dependency']);
    unset($form['override_title_text']['#dependency_type']);
    unset($form['override_title_heading']['#dependency']);
    unset($form['override_title_heading']['#dependency_type']);
  }
}

/**
 * Implements of hook_views_pre_render().
 */
function leidos_views_pre_render(&$view) {
  // Re-order rotator slides and capabilities based on specific order set in the panel.
  if (
    ($view->name == 'rotators' && !empty($view->args)) ||
    ($view->name == 'capabilities_sort' && !empty($view->args))
  ) {
    $items = explode(',', $view->args[0]);
    $item_count = 0;
    $results = array();
    while ($item_count < count($items)) {
      foreach ($view->result as $key => &$result) {
        $result_id = (isset($result->nid)) ? $result->nid : $result->tid;
        // Make sure the item is the correct item for this slot in the order.
        if (isset($items[$item_count]) && $result_id == $items[$item_count]) {
          $results[$item_count] = $result;
          $item_count++;
        }
      }
    }
    $view->result = $results;
  }
  elseif ($view->name == 'capabilities' && !empty($view->args)) {
    if (!isset($view->sorted)) {
      $sort_map = leidos_sort_capabilities($view->args);
      $sorted = array();
      foreach ($sort_map as $key => $sort) {
        $sorted[$key] = $view->result[$sort];
      }
      $view->result = $sorted;
      $view->sorted = TRUE;
    }
  }
}

/**
 * Custom sort function for the capabilities section, since it is very memory exhaustive.
 */
function leidos_sort_capabilities($arguments = array()) {
  // Render the capabilities view.
  $sort = views_get_view('capabilities_sort');
  $sort->set_display('page_1');
  if (!empty($arguments)) {
    $sort->set_arguments(array(implode(',', $arguments)));
  }
  $sort->pre_execute();
  $sort->execute();
  $pre_sort = $sort->result;
  $sort->render();
  $post_sort = $sort->result;
  $count = 0;
  $sort_map = array();
  // Map the keys for pre-sort and post-sort results.
  foreach ($post_sort as $post_key => $post_result) {
    foreach ($pre_sort as $pre_key => $pre_result) {
      if ($pre_result->tid == $post_result->tid) {
        $sort_map[$count] = $pre_key;
        unset($pre_sort[$pre_key]);
        $count++;
        break;
      }
    }
  }
  // Return the map for use by the capabilities view.
  return $sort_map;
}

/**
 * Implements hook_block_info().
 */
function leidos_block_info() {
  if (module_exists('search'))  {
    $blocks['leidos_search'] = array(
      'info'  => t('Leidos Search'),
    );
  }
  return $blocks;
}

/**
* Implements hook_block_view().
*/
function leidos_block_view($delta = '') {
  switch ($delta) {
    case 'leidos_search':
      if (arg(0) == 'search') {
        module_load_include('inc', 'search', 'search.pages');
        $result = search_view(arg(1), arg(2));
        $block['title'] = '';
        $block['content'] = $result['search_results'];
      }
      break;
  }
  return $block;
}
