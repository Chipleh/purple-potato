<?php

/**
 * @file
 * Module file for the Panels curator module.
 */

/**
 * Implements hook_menu().
 */
function panels_curator_menu() {
  $items = array();
  $items['admin/config/user-interface/panels'] = array(
    'title' => 'Panels curator',
    'description' => 'Configure panels buckets and groups',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('panels_curator_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'panels_curator.admin.inc',
  );
  return $items;
}

/**
 * Implements template_preprocess_panels_add_content_modal().
 */
function panels_curator_preprocess_panels_add_content_modal(&$vars) {
  // Get our curated categories from the admin configurations.
  $curated_categories = variable_get('panels_curator_categories', '');
  $curated_categories = array_filter(explode(',', $curated_categories));
  if (!empty($curated_categories)) {
    $categories = array();
    foreach ($curated_categories as $key => &$category) {
      if (!is_array($category)) {
        $key = $category;
        $regions = variable_get('panels_curator_regions_' . $key, '');
        $regions = array_filter(explode(',', $regions));
        $category = variable_get('panels_curator_' . $key, '');
        $category = unserialize($category);
        if (!empty($regions) && !in_array($vars['region'], $regions)) {
          // Limit category groups to specific regions.
          continue;
        }
        elseif (!empty($category['content']) && $key != 'disabled') {
          // Only add groups that are not empty.
          $categories[$key] = $category;
        }
      }
    }

    // Include the re-usable category.
    if (isset($vars['categories']['re-usable-content'])) {
      $categories['re-usable-content'] = $vars['categories']['re-usable-content'];
    }

    $vars['categories'] = $categories;
  }
  // Remove all category group links and rebuild from the new category list.
  unset($vars['categories_array']);
  // Process the list of categories.
  foreach ($vars['categories'] as $key => $category_info) {
    // The 'root' category is actually displayed under the category group links.
    if ($key == 'root') {
      continue;
    }

    $class = 'panels-modal-add-category';
    if ($key == $vars['category']) {
      $class .= ' active';
    }

    $url = $vars['renderer']->get_url('select-content', $vars['region'], $key);
    $vars['categories_array'][] = ctools_ajax_text_button($category_info['title'], $url, '', $class);
  }
}

/**
 * Implements hook_form_alter().
 */
function panels_curator_form_alter(&$form, &$form_state, $form_id) {
  if (isset($form['reusable'])) {
    // Force re-usable panels into one group.
    $form['reusable']['category']['#disabled'] = TRUE;
    $form['reusable']['category']['#value'] = 'Re-usable content';
    $form['reusable']['category']['#default_value'] = 'Re-usable content';
  }
}

/**
 * Implements hook_preprocess_page().
 */
function panels_curator_preprocess_page(&$vars) {
  // Check for panelizer default template settings.
  if (
    isset($vars['node']->panelizer) &&
    isset($vars['node']->panelizer_view_mode) &&
    variable_get('panels_curator_override_displays', FALSE)
  ) {
    $view_mode = $vars['node']->panelizer_view_mode;
    $display = !empty($vars['node']->panelizer) ? $vars['node']->panelizer[$view_mode]->display : FALSE;
    $default_display = variable_get('panels_curator_display_' . $vars['node']->type, 0);
    // If the current node is not the default template, use new duplicate panels and a new display.
    if (empty($vars['node']->panelizer[$view_mode]->did) && $vars['node']->nid != $default_display) {
      // Set the default template node if it is not already set.
      if (empty($default_display)) {
        variable_set('panels_curator_display_' . $vars['node']->type, $vars['node']->nid);
      }
      else {
        $new_display = panels_save_display($display);
        $vars['node']->panelizer[$view_mode]->display = &$new_display;
        foreach ($vars['node']->panelizer[$view_mode]->display->content as &$pane) {
          // Clone each FPP and then assign the new fpid.
          if ($pane->type == 'fieldable_panels_pane') {
            list($subtype, $fpid) = explode(':', $pane->subtype);
            if ($subtype == 'fpid') {
              // Clone the FPP object.
              $fpp = fieldable_panels_panes_load($fpid);
              if (!isset($fpp->fpid)) {
                continue;
              }

              // Clean the some basic settings.
              $fpp->fpid = NULL;
              $fpp->created = NULL;
              $fpp->timestamp = NULL;

              // Save the cloned FPP.
              $newfpp = fieldable_panels_panes_save($fpp);

              // Update the FPP reference.
              $pane->subtype = 'fpid:' . $newfpp->fpid;
            }
          }
        }
        // Save and map the new display/panels to the node.
        $vars['node']->panelizer[$view_mode]->display_is_modified = TRUE;
        node_save($vars['node']);
        ctools_include('object-cache');
        ctools_object_cache_clear('panels_node_display_cache', $vars['node']->nid);
        // Reload the current page so that the panel IDs are accurate.
        drupal_goto(current_path());
      }
    }
    // Add css and js for IPE enhancements.
    if (isset($vars['node']->panelizer) && user_access('use panels in place editing')) {
      drupal_add_css(drupal_get_path('module', 'panels_curator') . '/css/panels_curator.css');
      drupal_add_js(drupal_get_path('module', 'panels_curator') . '/js/panels_curator.js', array('group' => JS_LIBRARY));
    }
  }
}

/**
 * Implements hook_form_alter().
 *
 * Alter the IPE save control form to handle extra panels curator functionality.
 */
function panels_curator_form_panels_ipe_edit_control_form_alter(&$form, &$form_state) {
  // Add custom submit buttons based on current node and default template status.
  if (
    isset($form_state['panelizer entity']) &&
    variable_get('panels_curator_override_displays', FALSE)
  ) {
    if (isset($form_state['panelizer entity']->nid)) {
      $default_display = variable_get('panels_curator_display_' . $form_state['panelizer bundle'], 0);
      if ($form_state['panelizer entity']->nid == $default_display) {
        unset($form['buttons']['submit']);
      }
      else {
        // Add a new button that redirects to the default node template for this bundle.
        $redirect_url = url('node/' . $default_display);
        dpm($redirect_url);
        drupal_add_js(array('panelizer' => array('view_default_url' => $redirect_url)), 'setting');
        $form['buttons']['view_default'] = array(
          '#type' => 'submit',
          '#value' => t('View default template'),
          '#attributes' => array(
            'class' => array(
              'panels-ipe-view-default'
            )
          ),
          '#id' => 'panels-ipe-default',
          '#access' => TRUE,
        );
      }
      // Hide the revision checkbox.
      if (isset($form['revision_information'])) {
        unset($form['revision_information']);
      }
    }
  }
}
